from flask import Flask, render_template_string
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from io import BytesIO
import base64

app = Flask(__name__)

# Plantilla HTML
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Análisis de Regresión Exponencial</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            padding: 30px;
        }
        h1 {
            color: #4c1d95;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        .subtitle {
            text-align: center;
            color: #6b7280;
            margin-bottom: 30px;
            font-size: 1.1em;
        }
        .models-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .model-card {
            padding: 25px;
            border-radius: 10px;
            border: 3px solid;
        }
        .model1 {
            background: linear-gradient(135deg, #f3e7ff 0%, #e9d5ff 100%);
            border-color: #a855f7;
        }
        .model2 {
            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
            border-color: #10b981;
        }
        .model-card h3 {
            margin-bottom: 15px;
            font-size: 1.5em;
        }
        .model1 h3 {
            color: #7c3aed;
        }
        .model2 h3 {
            color: #059669;
        }
        .parameter {
            font-family: 'Courier New', monospace;
            font-size: 1.1em;
            margin: 8px 0;
            color: #1f2937;
        }
        .equation {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
            font-family: 'Courier New', monospace;
            font-size: 1em;
            border: 2px solid #e5e7eb;
        }
        .predictions {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 3px solid #f59e0b;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
        }
        .predictions h3 {
            color: #92400e;
            margin-bottom: 20px;
            font-size: 1.5em;
        }
        .pred-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
        }
        .pred-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .pred-card h4 {
            margin-bottom: 12px;
            font-size: 1.2em;
        }
        .pred-value {
            color: #1f2937;
            margin: 8px 0;
            font-size: 1em;
        }
        .graph-container {
            margin: 30px 0;
            background: #f9fafb;
            padding: 20px;
            border-radius: 10px;
            border: 2px solid #e5e7eb;
        }
        .graph-container h3 {
            color: #374151;
            margin-bottom: 15px;
            font-size: 1.3em;
        }
        .graph-container img {
            width: 100%;
            height: auto;
            border-radius: 8px;
        }
        .note {
            background: #f3f4f6;
            padding: 20px;
            border-radius: 10px;
            border-left: 5px solid #6366f1;
            margin-top: 30px;
        }
        .note h3 {
            color: #4b5563;
            margin-bottom: 10px;
        }
        .note p {
            color: #6b7280;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Análisis de Regresión Exponencial</h1>
        <p class="subtitle">Crecimiento de Población Bacteriana</p>
        
        <div class="models-grid">
            <div class="model-card model1">
                <h3>Modelo 1: Y = a·e^(bx)</h3>
                <div class="parameter"><strong>a =</strong> {{ "%.4f"|format(model1_a) }}</div>
                <div class="parameter"><strong>b =</strong> {{ "%.4f"|format(model1_b) }}</div>
                <div class="equation">
                    Y = {{ "%.4f"|format(model1_a) }} · e^({{ "%.4f"|format(model1_b) }}x)
                </div>
            </div>
            
            <div class="model-card model2">
                <h3>Modelo 2: Y = a·b^x</h3>
                <div class="parameter"><strong>a =</strong> {{ "%.4f"|format(model2_a) }}</div>
                <div class="parameter"><strong>b =</strong> {{ "%.4f"|format(model2_b) }}</div>
                <div class="equation">
                    Y = {{ "%.4f"|format(model2_a) }} · {{ "%.4f"|format(model2_b) }}^x
                </div>
            </div>
        </div>

        <div class="predictions">
            <h3>Predicciones de Población</h3>
            <div class="pred-grid">
                <div class="pred-card">
                    <h4 style="color: #7c3aed;">Modelo 1 (Y = a·e^(bx))</h4>
                    <div class="pred-value"><strong>t = 50s:</strong> {{ "%.2f"|format(pred_50_m1) }} bacterias</div>
                    <div class="pred-value"><strong>t = 60s:</strong> {{ "%.2f"|format(pred_60_m1) }} bacterias</div>
                </div>
                <div class="pred-card">
                    <h4 style="color: #059669;">Modelo 2 (Y = a·b^x)</h4>
                    <div class="pred-value"><strong>t = 50s:</strong> {{ "%.2f"|format(pred_50_m2) }} bacterias</div>
                    <div class="pred-value"><strong>t = 60s:</strong> {{ "%.2f"|format(pred_60_m2) }} bacterias</div>
                </div>
            </div>
        </div>

        <div class="graph-container">
            <h3>Gráfico 1: Datos Observados vs Modelo 1 (Y = a·e^(bx))</h3>
            <img src="data:image/png;base64,{{ graph1 }}" alt="Gráfico Modelo 1">
        </div>

        <div class="graph-container">
            <h3>Gráfico 2: Datos Observados vs Modelo 2 (Y = a·b^x)</h3>
            <img src="data:image/png;base64,{{ graph2 }}" alt="Gráfico Modelo 2">
        </div>

        <div class="note">
            <h3>Nota Importante</h3>
            <p>Ambos modelos son matemáticamente equivalentes ya que b^x = e^(x·ln(b)). 
            En este análisis, se utilizó regresión lineal sobre los datos transformados logarítmicamente 
            para estimar los parámetros de ambas ecuaciones exponenciales.</p>
        </div>
    </div>
</body>
</html>
'''

def load_data():
    """Carga los datos del archivo CSV"""
    # Lee el archivo CSV
    df = pd.read_csv('data1.csv', delimiter=';')
    # Elimina columnas vacías
    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
    # Limpia los nombres de las columnas
    df.columns = df.columns.str.strip()
    return df

def calculate_regression(df):
    """Calcula la regresión exponencial para ambos modelos"""
    x = df['Tiempo_segundos'].values
    y = df['Poblacion_bacterias'].values
    
    # Transformación logarítmica
    ln_y = np.log(y)
    
    # Regresión lineal en escala logarítmica
    n = len(x)
    sum_x = np.sum(x)
    sum_ln_y = np.sum(ln_y)
    sum_x_ln_y = np.sum(x * ln_y)
    sum_x2 = np.sum(x ** 2)
    
    # Calcular parámetros para Modelo 1: Y = a * e^(bx)
    b1 = (n * sum_x_ln_y - sum_x * sum_ln_y) / (n * sum_x2 - sum_x ** 2)
    ln_a1 = (sum_ln_y - b1 * sum_x) / n
    a1 = np.exp(ln_a1)
    
    # Calcular parámetros para Modelo 2: Y = a * b^x
    a2 = a1
    b2 = np.exp(b1)
    
    return a1, b1, a2, b2

def create_graph(df, a, b, model_type, color):
    """Crea un gráfico para el modelo especificado"""
    x = df['Tiempo_segundos'].values
    y = df['Poblacion_bacterias'].values
    
    # Generar valores ajustados
    x_fit = np.linspace(x.min(), x.max(), 300)
    if model_type == 1:
        y_fit = a * np.exp(b * x_fit)
        title = 'Datos Observados vs Modelo 1: Y = a·e^(bx)'
        label = f'Y = {a:.4f}·e^({b:.4f}x)'
    else:
        y_fit = a * (b ** x_fit)
        title = 'Datos Observados vs Modelo 2: Y = a·b^x'
        label = f'Y = {a:.4f}·{b:.4f}^x'
    
    # Crear figura
    plt.figure(figsize=(12, 6))
    plt.scatter(x, y, color=color, alpha=0.6, s=50, label='Datos Observados', zorder=3)
    plt.plot(x_fit, y_fit, color=color, linewidth=2.5, label=label, zorder=2)
    plt.xlabel('Tiempo (segundos)', fontsize=12, fontweight='bold')
    plt.ylabel('Población de Bacterias', fontsize=12, fontweight='bold')
    plt.title(title, fontsize=14, fontweight='bold', pad=20)
    plt.legend(fontsize=10, loc='upper left')
    plt.grid(True, alpha=0.3, linestyle='--')
    plt.tight_layout()
    
    # Convertir a base64
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=100, bbox_inches='tight')
    buffer.seek(0)
    image_base64 = base64.b64encode(buffer.getvalue()).decode()
    plt.close()
    
    return image_base64

@app.route('/')
def index():
    # Cargar datos
    df = load_data()
    
    # Calcular regresión
    a1, b1, a2, b2 = calculate_regression(df)
    
    # Calcular predicciones para t=50 y t=60
    pred_50_m1 = a1 * np.exp(b1 * 50)
    pred_60_m1 = a1 * np.exp(b1 * 60)
    pred_50_m2 = a2 * (b2 ** 50)
    pred_60_m2 = a2 * (b2 ** 60)
    
    # Crear gráficos
    graph1 = create_graph(df, a1, b1, 1, '#7c3aed')
    graph2 = create_graph(df, a2, b2, 2, '#059669')
    
    return render_template_string(
        HTML_TEMPLATE,
        model1_a=a1,
        model1_b=b1,
        model2_a=a2,
        model2_b=b2,
        pred_50_m1=pred_50_m1,
        pred_60_m1=pred_60_m1,
        pred_50_m2=pred_50_m2,
        pred_60_m2=pred_60_m2,
        graph1=graph1,
        graph2=graph2
    )

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=500000)
